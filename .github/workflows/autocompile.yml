name: Build

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        components: rustfmt, clippy
    
    # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–µ—à –¥–ª—è Rust (–ø—Ä–æ—â–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ)
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    
    - name: Build
      run: cargo build --release --verbose
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: target/release/*.exe
        retention-days: 30
        
  # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –ø—Ä–∏ –ø—É—à–µ —Ç–µ–≥–∞
  release:
    needs: build-windows
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤ (–Ω–∞ —Å–ª—É—á–∞–π fallback)
    
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: windows-executable
        path: ./artifacts
    
    - name: Get the version
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Create source archive
      run: |
        mkdir release
        cp -r artifacts/* release/
        git archive --format=zip --output=release/source-${{ steps.get_version.outputs.VERSION }}.zip HEAD
        git archive --format=tar.gz --output=release/source-${{ steps.get_version.outputs.VERSION }}.tar.gz HEAD
    
    - name: Extract tag message or generate changelog
      id: changelog
      run: |
        TAG_NAME="${{ steps.get_version.outputs.VERSION }}"
        TAG_MESSAGE=$(git show -s --format=%B $TAG_NAME 2>/dev/null || echo "")
        
        if [ -n "$TAG_MESSAGE" ]; then
          # –ï—Å–ª–∏ —Ç–µ–≥ annotated, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–ª–æ —Ä–µ–ª–∏–∑–∞
          # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (subject), –±–µ—Ä–µ–º —Ç–µ–ª–æ
          BODY=$(echo "$TAG_MESSAGE" | tail -n +3)
          if [ -n "$BODY" ]; then
            {
              echo 'CHANGELOG<<EOF'
              echo "$BODY"
              echo 'EOF'
            } >> $GITHUB_OUTPUT
          else
            # Fallback, –µ—Å–ª–∏ —Ç–µ–ª–æ –ø—É—Å—Ç–æ–µ
            echo "No custom body found in tag message. Falling back to generated changelog."
            if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
              PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
              {
                echo 'CHANGELOG<<EOF'
                echo "## What's Changed"
                echo ""
                git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --reverse
                echo ""
                echo ""
                echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$TAG_NAME"
                echo 'EOF'
              } >> $GITHUB_OUTPUT
            else
              {
                echo 'CHANGELOG<<EOF'
                echo "## Initial Release"
                echo ""
                git log --pretty=format:"- %s (%h)" --reverse
                echo 'EOF'
              } >> $GITHUB_OUTPUT
            fi
          fi
        else
          # –ï—Å–ª–∏ —Ç–µ–≥ –Ω–µ annotated, fallback –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
          if git describe --tags --abbrev=0 HEAD^ >/dev/null 2>&1; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
            {
              echo 'CHANGELOG<<EOF'
              echo "## What's Changed"
              echo ""
              git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s (%h)" --reverse
              echo ""
              echo ""
              echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$TAG_NAME"
              echo 'EOF'
            } >> $GITHUB_OUTPUT
          else
            {
              echo 'CHANGELOG<<EOF'
              echo "## Initial Release"
              echo ""
              git log --pretty=format:"- %s (%h)" --reverse
              echo 'EOF'
            } >> $GITHUB_OUTPUT
          fi
        fi
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Downloads
          - üì¶ **Windows executable** - Pre-built binary for Windows
          - üìÑ **Source code** - Available in zip and tar.gz formats below
        files: |
          release/*
        generate_release_notes: false
        draft: true  # –î–µ–ª–∞–µ–º draft, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π (–∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ false –¥–ª—è –∞–≤—Ç–æ-–ø—É–±–ª–∏–∫–∞—Ü–∏–∏)
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
