name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        components: rustfmt, clippy
    
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    
    - name: Build
      run: cargo build --release --verbose
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Get version from Cargo.toml
      id: cargo_version
      run: |
        $version = (Select-String -Path Cargo.toml -Pattern '^version = "(.*)"').Matches.Groups[1].Value
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version found: $version"
      shell: pwsh
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: target/release/*.exe
        retention-days: 30
        
  create-release:
    needs: build-windows
    runs-on: ubuntu-latest
    # –¢–æ–ª—å–∫–æ –ø—Ä–∏ –ø—É—à–µ –≤ main (–Ω–µ –ø—Ä–∏ PR)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version from Cargo.toml
      id: cargo_version
      run: |
        VERSION=$(grep "^version" Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Version found: $VERSION"
    
    - name: Check if release exists
      id: check_release
      run: |
        if gh release view "v${{ steps.cargo_version.outputs.VERSION }}" >/dev/null 2>&1; then
          echo "EXISTS=true" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.cargo_version.outputs.VERSION }} already exists, skipping"
        else
          echo "EXISTS=false" >> $GITHUB_OUTPUT
          echo "Will create release v${{ steps.cargo_version.outputs.VERSION }}"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get previous tag
      if: steps.check_release.outputs.EXISTS == 'false'
      id: prev_tag
      run: |
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–≥
        PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        echo "PREV_TAG=$PREV_TAG" >> $GITHUB_OUTPUT
        if [ -z "$PREV_TAG" ]; then
          echo "No previous tag found, will include all commits"
        else
          echo "Previous tag: $PREV_TAG"
        fi
    
    - name: Generate changelog
      if: steps.check_release.outputs.EXISTS == 'false'
      id: changelog
      run: |
        echo "Generating changelog..."
        
        # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –¥–ª—è changelog
        echo "" > changelog.md
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–≥, –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ—Å–ª–µ –Ω–µ–≥–æ
        if [ -n "${{ steps.prev_tag.outputs.PREV_TAG }}" ]; then
          echo "## üìã Changes since ${{ steps.prev_tag.outputs.PREV_TAG }}" >> changelog.md
          echo "" >> changelog.md
          
          # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ (—Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤)
          git log ${{ steps.prev_tag.outputs.PREV_TAG }}..HEAD --pretty=format:"- %s" --no-merges >> changelog.md
        else
          echo "## üìã All Changes" >> changelog.md
          echo "" >> changelog.md
          
          # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–º–∏—Ç—ã (—Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤)
          git log --pretty=format:"- %s" --no-merges >> changelog.md
        fi
        
        echo "" >> changelog.md
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º changelog –≤ output
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        cat changelog.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –ª–æ–≥–∞—Ö
        echo "Generated changelog:"
        cat changelog.md

    # –ù–æ–≤–æ–µ: –±–µ—Ä—ë–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –±–µ–∑ UI GitHub.
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:
    # 1) RELEASE_NOTES/v<version>.md
    # 2) RELEASE_NOTES.md –≤ –∫–æ—Ä–Ω–µ
    # 3) –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ç–µ–≥–∞ v<version> (annotated tag)
    # 4) –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞, –∏–∑–º–µ–Ω–∏–≤—à–µ–≥–æ Cargo.toml, –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ "RELEASE_NOTES:"
    - name: Resolve release notes
      if: steps.check_release.outputs.EXISTS == 'false'
      id: release_notes
      run: |
        set -e
        VERSION="${{ steps.cargo_version.outputs.VERSION }}"
        NOTES=""
        SOURCE=""

        if [ -f "RELEASE_NOTES/v${VERSION}.md" ]; then
          NOTES="$(cat "RELEASE_NOTES/v${VERSION}.md")"
          SOURCE="file RELEASE_NOTES/v${VERSION}.md"
        elif [ -f "RELEASE_NOTES.md" ]; then
          NOTES="$(cat RELEASE_NOTES.md)"
          SOURCE="file RELEASE_NOTES.md"
        else
          if git rev-parse -q --verify "refs/tags/v${VERSION}" >/dev/null; then
            MSG="$(git for-each-ref refs/tags/v${VERSION} --format='%(contents)')"
            if [ -n "$MSG" ]; then
              NOTES="$MSG"
              SOURCE="tag v${VERSION}"
            fi
          fi
          if [ -z "$NOTES" ]; then
            BUMP_COMMIT="$(git log -1 --format=%H -- Cargo.toml || true)"
            if [ -n "$BUMP_COMMIT" ]; then
              BODY="$(git log -1 --format=%B "$BUMP_COMMIT")"
              if echo "$BODY" | grep -qi '^RELEASE_NOTES:'; then
                NOTES="$(echo "$BODY" | awk 'BEGIN{found=0} /^RELEASE_NOTES:/ {found=1; sub(/^RELEASE_NOTES:[[:space:]]*/, ""); print; next} found {print}')"
                SOURCE="commit $BUMP_COMMIT"
              fi
            fi
          fi
        fi

        echo "SOURCE=$SOURCE" >> $GITHUB_OUTPUT
        if [ -n "$NOTES" ]; then
          echo "HAS_NOTES=true" >> $GITHUB_OUTPUT
        else
          echo "HAS_NOTES=false" >> $GITHUB_OUTPUT
        fi
        echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
        printf "%s\n" "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo "Release notes source: ${SOURCE:-none}"
    
    - name: Download artifact
      if: steps.check_release.outputs.EXISTS == 'false'
      uses: actions/download-artifact@v4
      with:
        name: windows-executable
        path: ./artifacts
    
    - name: Prepare release files
      if: steps.check_release.outputs.EXISTS == 'false'
      run: |
        mkdir release
        cp -r artifacts/* release/
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º exe —Ñ–∞–π–ª—ã, –¥–æ–±–∞–≤–ª—è—è –≤–µ—Ä—Å–∏—é
        cd release
        for file in *.exe; do
          if [ -f "$file" ]; then
            name="${file%.exe}"
            mv "$file" "${name}-v${{ steps.cargo_version.outputs.VERSION }}.exe"
          fi
        done
        cd ..

    # –ù–æ–≤–æ–µ: —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å —Ç–µ–ª–æ–º —Ä–µ–ª–∏–∑–∞ (—É–¥–æ–±–Ω–µ–µ, —á–µ–º –∏–Ω–ª–∞–π–Ω)
    - name: Build release body
      if: steps.check_release.outputs.EXISTS == 'false'
      env:
        CHANGELOG: ${{ steps.changelog.outputs.CHANGELOG }}
        HAS_NOTES: ${{ steps.release_notes.outputs.HAS_NOTES }}
        RELEASE_NOTES: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        VERSION: ${{ steps.cargo_version.outputs.VERSION }}
      run: |
        set -e
        echo "<!-- Generated by CI. You can override via RELEASE_NOTES files, tag annotation or commit message. -->" > release_body.md
        echo "" >> release_body.md
        echo "## üéâ Release v$VERSION" >> release_body.md
        echo "" >> release_body.md
        if [ "$HAS_NOTES" = "true" ]; then
          echo "## üì∞ Release notes" >> release_body.md
          echo "" >> release_body.md
          printf "%s\n" "$RELEASE_NOTES" >> release_body.md
        else
          echo "_(–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏ –≤ RELEASE_NOTES.md, RELEASE_NOTES/v$VERSION.md, –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Ç–µ–≥–∞ v$VERSION –∏–ª–∏ –≤ –∫–æ–º–º–∏—Ç Cargo.toml –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ \"RELEASE_NOTES:\".)_" >> release_body.md
        fi
        echo "" >> release_body.md
        echo "---" >> release_body.md
        echo "" >> release_body.md
        printf "%s\n" "$CHANGELOG" >> release_body.md
        echo "" >> release_body.md
        echo "---" >> release_body.md
        echo "" >> release_body.md
        echo "## üì¶ Downloads" >> release_body.md
        echo "" >> release_body.md
        echo "### Windows" >> release_body.md
        echo "- **Windows executable** - Pre-built binary for Windows (x86_64)" >> release_body.md
        echo "" >> release_body.md
        echo "---" >> release_body.md
        echo "" >> release_body.md
        echo "## üìù Installation" >> release_body.md
        echo "" >> release_body.md
        echo "### Windows" >> release_body.md
        echo "1. Download the \`.exe\` file" >> release_body.md
        echo "2. Place it in your desired directory" >> release_body.md
        echo "3. Run from command line or double-click" >> release_body.md
        echo "" >> release_body.md
        echo "### Build from source" >> release_body.md
        echo '\`\`\`bash' >> release_body.md
        echo 'cargo build --release' >> release_body.md
        echo '\`\`\`' >> release_body.md
    
    - name: Create Draft Release
      if: steps.check_release.outputs.EXISTS == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.cargo_version.outputs.VERSION }}
        name: Release v${{ steps.cargo_version.outputs.VERSION }}
        body_path: release_body.md
        files: |
          release/*
        generate_release_notes: false  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–π changelog
        draft: true  # –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—ë–º –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
