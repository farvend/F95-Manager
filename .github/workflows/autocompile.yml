name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
        components: rustfmt, clippy
    
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
    
    - name: Build
      run: cargo build --release --verbose
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Get version from Cargo.toml
      id: cargo_version
      run: |
        $version = (Select-String -Path Cargo.toml -Pattern '^version = "(.*)"').Matches.Groups[1].Value
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version found: $version"
      shell: pwsh
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: target/release/*.exe
        retention-days: 30
        
  create-release:
    needs: build-windows
    runs-on: ubuntu-latest
    # –¢–æ–ª—å–∫–æ –ø—Ä–∏ –ø—É—à–µ –≤ main (–Ω–µ –ø—Ä–∏ PR)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version from Cargo.toml
      id: cargo_version
      run: |
        VERSION=$(grep "^version" Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Version found: $VERSION"
    
    - name: Check if release exists
      id: check_release
      run: |
        if gh release view "v${{ steps.cargo_version.outputs.VERSION }}" >/dev/null 2>&1; then
          echo "EXISTS=true" >> $GITHUB_OUTPUT
          echo "Release v${{ steps.cargo_version.outputs.VERSION }} already exists, skipping"
        else
          echo "EXISTS=false" >> $GITHUB_OUTPUT
          echo "Will create release v${{ steps.cargo_version.outputs.VERSION }}"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Download artifact
      if: steps.check_release.outputs.EXISTS == 'false'
      uses: actions/download-artifact@v4
      with:
        name: windows-executable
        path: ./artifacts
    
    - name: Create source archives
      if: steps.check_release.outputs.EXISTS == 'false'
      run: |
        mkdir release
        cp -r artifacts/* release/
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º exe —Ñ–∞–π–ª—ã, –¥–æ–±–∞–≤–ª—è—è –≤–µ—Ä—Å–∏—é
        cd release
        for file in *.exe; do
          if [ -f "$file" ]; then
            name="${file%.exe}"
            mv "$file" "${name}-v${{ steps.cargo_version.outputs.VERSION }}.exe"
          fi
        done
        cd ..
        # –°–æ–∑–¥–∞—ë–º –∞—Ä—Ö–∏–≤—ã –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤
        git archive --format=zip --output=release/source-v${{ steps.cargo_version.outputs.VERSION }}.zip HEAD
        git archive --format=tar.gz --output=release/source-v${{ steps.cargo_version.outputs.VERSION }}.tar.gz HEAD
    
    - name: Create Draft Release
      if: steps.check_release.outputs.EXISTS == 'false'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.cargo_version.outputs.VERSION }}
        name: Release v${{ steps.cargo_version.outputs.VERSION }}
        body: |
          <!-- –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π -->
          
          ## üìù Release Notes
          
          _–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π..._
          
          ---
          
          ## üì¶ Downloads
          
          - **Windows executable** - Pre-built binary for Windows
          - **Source code** - Available in zip and tar.gz formats below
        files: |
          release/*
        generate_release_notes: false
        draft: true  # –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞—ë–º –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
